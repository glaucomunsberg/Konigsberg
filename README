################################################################################
#                       Königsberg - Grafo em Java
################################################################################
#
# 1.Introduçao
# 2.Como foi programado
# 3.Comandos
# 4.Como executar
# 5.Resultados obtidos
# 6.Conclusão
#
# @autor   Glauco Roberto Munsberg dos Santos
# @github  git@github.com:glaucomunsberg/Konigsberg.git
# @version 0.4.5
#
################################################################################
# 1.Introduçao
################################################################################
#
#   Projeto Königsberg se propõem a realizar o trabalho de EDII, proposto pelo 
#   professor Ricardo Matsumura Araújo e que está espeficido através dos links:
#   * Primeira parte do Trabalho:
#       http://avainstitucional.ufpel.edu.br/mod/assignment/view.php?id=25409
#   * Segunda parte do Trabalho:
#       http://avainstitucional.ufpel.edu.br/mod/assignment/view.php?id=25879
#       sendo esse segundo trabalho realizado em conjunto com também acadêmico
#       da ciência da computação André Peil.
#
#   O repositório e o projeto recebe o nome 'Königsberg' em referência ao 
#   problema histórico relacionado aos grafos. O trabalho foi versionado no 
#   GitHub como apoio a programação, para o maior detalhamento das versões 
#   consulte o arquivo "version.txt". 
#
#   O trabalho foi programado e testado em um computador:
#    * Pentium Dual Core 2.2GHz
#    * 2,5GB Memória RAM DDR2
#    * Ubuntu 12.04 32-bits, área de troca de 1Gb para auxílio, com Java7 e 
#      demais configurações padrões.
#
#   1.1 Resultado Obtido
#       Usando uma JMV de no máximo 2,3Gb os resultados* obtidos foram:
#
#   1.1.1 Grafos
#       Numero de Arestas: XX
#       Tamanho da Vertices: XX
#       Tempo de execução : XX,Xs
#
#   1.1.2 Visualização de Grafos
#       Numero de caract.: 5mil
#       Tempo de execução: 57,7s
#
#   *Sem estouro de memória e inferior a XXsegundos
#
################################################################################
# 2.Como foi programado
################################################################################
#
#   O projeto Königsberg dividido em duas partes, sendo a primeira programada
#   por Glauco Roberto Munsberg dos Santos e a segunda parte programada por este
#   e André Peil sendo o desenvolvimento ocorrido do periodo entre 3 de Julho de
#   2012 até XX de XX de 2012. Para isso foi usado a linguagem de programação 
#   Java dando continuidade aos conceitos obtido através da, também disciplica
#   na Ciência da Computação, Programação Orientada à Objetos. 
#
#   PRIMEIRA PARTE:
#   SEGUNDA PARTE:
#
#   A documentação do código está dividida em duas parte:
#    A primeira que se refere o comportamente do programa e se encontra neste
#     arquivo.
#    A segunda se encontra diretamente nos arquivos *.java referente como é 
#     executado os seus métodos e comportamento interno, bem como o retorno e 
#     seu tipo.
#
################################################################################
# 3.Comandos
################################################################################
#
#   Os comandos  funcionando sempre em bloco tendo primeiro comando indicando
#   qual grupo pertence os comandos seguintes a ele, até que outro grupo seja
#   indicado. Para finalizar a lista de comando basta inserir um arroba.
#   Veja como seria um exemplo:
#
#   -exemplo----------------------------
#   |	<TIPO_1>			|
#   |	<COMANDO_DO_TIPO1>		|
#   |	<COMANDO_DO_TIPO1>		|
#   |	<TIPO_2>			|
#   |	<COMANDO_DO_TIPO2>		|
#   |	<TIPO_1>			|
#   |	<COMANDO_DO_TIPO1>		|
#   |     @				|
#   -------------------------------------
#   -Retorno-----------------------------
#   |					|
#   -------------------------------------
#   Todo grupo tem a característica de começar com "*"(asterisco), assim quando
#   há a presença de um comando, que começa com asterisco, o programa entende
#   que os(s) próximo(s) comando(s) pertence a daquele grupo.
#   Vejamos abaixo a lista de todos os comandos e o índice de sua documentação.
#
#   Os comandos não são case-sensitive enquanto sua sua sintaxe, porém seus
#   parâmetros não obedece a isso. Porém é necessário que cada grupo contenha 
#   pelo menos UM comando. Não podendo assim colocar dois grupos de comandos 
#   sem um comando do primeiro grupo esteja entre eles.
#   Veja exemplo do que NÂO se pode fazer:
#
#     -arquivo_nao_executa.txt----------
#     |	<TIPO1>				|
#     |	<COMANDO_TIPO_2>		|
#     |	@				|
#     -----------------------------------
#     -Retorno---------------------------
#     |					|
#     -----------------------------------
#
#   Leia abaixo mais sobre os comandos, ou pegue os arquivo dos exemplos no 
#   diretório "exemplosDeComandos/".
#
#   Veja abaixo a lista de comandos aceitos pelo programa:
#
#     -Lista_de_Comandos--------------------------
#     |COMANDO				| Indice |
#     | *vertices <NUM>			|  3.2	 |
#     | *vertices       		|  3.2.1 |
#     | <ID> "<NOME>"			|  3.2.2 |
#     | *Arcs				|  3.3	 |
#     | *Edges				|  3.3	 |
#     | <ID1> <ID2> <PESO>		|  3.3.1 |
#     | *Queries			|  3.4	 |
#     | get <ID>			|  3.4.1 |
#     | delete <ID>			|  3.4.2 |
#     | remove <ID1> <ID2>              |  3.4.3 |
#     | vizinhos <ID>			|  3.4.4 |
#     | conexao <ID1> <ID2>		|  3.4.5 |
#     | ordemtopologica			|  3.4.6 |
#     | arvoreminima			|  3.4.7 |
#     | menorcaminho			|  3.4.8 |
#     | modografico                     |  3.4.9 |
#     | @				|  3.6	 | 
#     --------------------------------------------
#
#   Descrição de funcionalidade de
#   http://avainstitucional.ufpel.edu.br/mod/assignment/view.php?id=25409
#   cada comando:
#
#   3.1 Grupos de Comandos
#      Os comandos são divididos em três grupos definidos segundo a utilidade 
#      no sistema. Sendo eles:
#
#         "*vértices" (3.2) agrupa dentro dele apenas um comando, de criaçao de
#         vértices no grafo.
#
#         "*Arcs" e "*Edges" (3.3) são comandos de criação de arestas no grafo.
#         Abriga-se nesse grupo também apenas um tipo comando.
#
#         "*Queries" (3.4) contém comandos de retorno do grafo, por exemplo o de
#         retornar se existe ou não uma aresta.
#      
#   3.2 *vertices <NUM>
#      O comando "*vértice <NUM>" informa ao programa que existirá um bloco de 
#      comandos após ele, esse bloco contém a inserção de um ou mais vértices 
#      (3.2.2) no grafo. O comando não é case-sensitive permitindo ser digitado
#      em caixa-alta também.
#      Comando é composto por duas partes:
#       *vertices
#       <NUM> - numero máximo de vertices permitidos. Note que esse valor pode
#               variar de 0 a 2147483647.
#
#         Veja o exemplo a abaixo:
#           -arquivo_add_vertice.txt-------------
#           |	*vertices 3			|
#           |	1 "vertice 1"			|
#           |	2 "vertice 2"			|
#           |	3 "vertice 3"			|
#           |	@				|
#           -------------------------------------
#           -Retorno-----------------------------
#           |					|
#           -------------------------------------
#      Obs.: O numero máximo pode ser inserido uma única vez, apos isso não se
#      pode modifica mais o valor atribuido ao máximo de vertices.
# 
#         3.2.1 *vertices
#         O comando "*vértice" informa ao programa que existirá um bloco de 
#         comandos após ele, neste caso o de inserção de vertices. Porém esse
#         comando deve ser usado apenas apos a execução do comando
#         "*vertices <NUM>" (2.3), pois assim já estará setado o número máximo
#         de vertices suportado pelo grafo.
#         O comando não é case-sensitive permitindo ser digitado em caixa-alta
#         também.
#         Comando é composto por duas partes:
#          *vertices
#         Veja o exemplo a abaixo:
#           -arquivo_add_vertice_exec.txt--------
#           |	*vertices 3			|
#           |	1 "vertice 1"			|
#           |	2 "vertice 2"			|
#           |   *vertices                       |
#           |	3 "vertice 3"			|
#           |	*queries			|
#           |   get 2                           |
#           |   get 3                           |
#           |	@				|
#           -------------------------------------
#           -Retorno------------------------------------------------------------
#           |	{"vértice":{"ID":2, "dado":"vértice 2", "resposta":"sucesso"}} |
#           |	{"vértice":{"ID":3, "dado":"vértice 3", "resposta":"sucesso"}} |
#           --------------------------------------------------------------------
#
#         Veja o exemplo a abaixo de como haveria falha:
#           -arquivo_add_vertice_nao_exec.txt----
#           |	*vertices			|
#           |	1 "vertice 1"			|
#           |	2 "vertice 2"			|
#           |   *vertices 1                     |
#           |	3 "vertice 3"			|
#           |	*queries			|
#           |   get 2                           |
#           |   get 3                           |
#           |	@				|
#           -------------------------------------
#           -Retorno------------------------------------------------------------
#           |	{"vértice":{"ID":2, "dado":"", "resposta":"falha"}}            |
#           |	{"vértice":{"ID":3, "dado":"vértice 3", "resposta":"sucesso"}} |
#           --------------------------------------------------------------------
#        Obs.: Caso esse comando seja usado sem setar o número máximo de vertice
#        suportado pelo grafo, todo e qualquer vertice será ignorado até que
#        haja a escolha máxima de vertices
#         
#         3.2.2 <ID> "<NOME>"
#         O comando de inserção de vértice deve estar dentro de um bloco do 
#         grupo de vértices. O comando é composto por duas partes:         
#          <ID>     int   - id que terá o vértice podendo assumir todos os
#                           valores positivos entre  0 e 2147483647.
#          <NOME> string  - nome que terá o vértice (LowerCase)
#
#         A primeira parte referencia ao ID do vértice e deve ser um integer, 
#         a segunda é o nome do vértice e o nome é delimitado com aspas no 
#         início e no final.
#
#         Veja o exemplo a abaixo:
#           -arquivo_add_vertice.txt-------------
#           |	*vertices 3			|
#           |	1 "vertice 1"			|
#           |	2 "vertice 2"			|
#           |	3 "vertice 3"			|
#           |	@				|
#           -------------------------------------
#           -Retorno-----------------------------
#           |					|
#           -------------------------------------
#         Obs.: Caso seja inserido um vértice com um ID já existente ou com valor
#           negativo será ignorado a adição deste.
#
#   3.3 *Arcs e *Edges
#      Ambos comando "*arcs" e "*edges" informam ao programa que existirá um 
#      bloco de comandos após ele, esse bloco contém a inserção de uma ou mais 
#      arestas no grafo.
#
#      O comando não é case-sensitive permitindo ser digitado em caixa-alta 
#      também. Lembre-se que o programa lerá apenas uma vez o tipo de aresta, 
#      se a primeira aresta for inserida como do grupo *arcs, mesmo que use 
#      *edges respeitará ao primeiro tipo. Caso seja inserido o tipo *edges na 
#      primeira vez, será sempre *edges mesmo com inserção do tipo *arcs.
#
#      Veja a diferença entre ambos:
#      *edges - Comando que insere arestas não direcionadas, ou seja, para toda
#       aresta X com vértice origem A e vértice destinho B, existe uma aresta Y 
#       com vértice origem em B e vértice destino em A.
#      *arcs - Comando que insere arestas direcionadas, ou seja, para toda 
#       aresta X tem vertece origem em A e vértice destino B, porém não insere 
#       uma aresta com vértice origem B com vértice destino em A.
#
#         3.3.1 <ID1> <ID2> <PESO>
#         O comando de inserção de aresta deve estar dentro de um bloco do 
#         grupo de arestas. Comando que é composto por três partes:
#          <ID1>  int - vértice de origem
#          <ID2>  int - vértice de destino
#          <PESO> int - peso da aresta é um valor numérico positivo entre 0 e
#                       e 2147483647.
#         Veja abaixo um exemplo de como adicionar arestas direcionadas:  
#         
#           -arquivo_add_arestas_direc.txt-------
#           |	*vertices 3			|
#           |	1 "vertice 1"			|
#           |	2 "vertice 2"			|
#           |	3 "vertice 3"			|
#           |	*arcs				|
#           |	1 2 20				|
#           |	2 3 10				|
#           |	@				|
#           -------------------------------------
#           -Retorno-----------------------------
#           |					|
#           -------------------------------------
#
#         Veja abaixo um exemplo de como adicionar arestas não direcionadas:
#
#           -arquivo_add_arestas_no_direc.txt----
#           |	*vertices 3			|
#           |	1 "vertice 1"			|
#           |	2 "vertice 2"			|
#           |	3 "vertice 3"			|
#           |	*edges				|
#           |	1 3 1				|
#           |	3 1 2				|
#           |	@				|
#           -------------------------------------
#           -Retorno-----------------------------
#           |					|
#           -------------------------------------
#         Obs.: Caso não seja encontrado um ou ambos os vértices, o comando é 
#         é ignorado e o grafo não é modificado.
#
#   3.4 *Queries
#      O comando "*queries" informa ao programa que existirá um bloco de 
#      comandos após ele, esse bloco contém o retorno de informações do 
#      grafo. Os comandos aceitos nesse bloco estão descritos abaixo.
#      O comando não é case-senitive permitindo ser digitado em caixa-alta 
#      também.
#
#         3.4.1 get <ID>
#         O comando "get <ID>"retorna a string associada ao vértice de número 
#         ID, se este existir, ou indica a ocorrência de falha.
#         O comando é composto por duas partes:
#          get
#          <ID> - Índice do vértice
#
#         Veja um exemplo:
#         -arquivo_get_aresta.txt----------------
#         |	*vertices 1			|
#         |	1 "vertice 1"			|
#         |	*queries			|
#         |	get 1				|
#         |	get 2				|
#         |	@				|
#         ---------------------------------------
#         -Retorno-------------------------------------------------------------
#         |	{"vértice":{"ID":1, "dado":"vértice 1", "resposta":"sucesso"}}|
#         |	{"vértice":{"ID":2, "dado":"", "resposta":"falha"}}           |
#         ---------------------------------------------------------------------
#
#         3.4.2 delete <ID>
#         O comando "get <ID>" remove o vértice ID do grafo, se este existir, 
#         ou retorna falha se ID não existir.
#         O comando é composto por duas partes:
#          delete
#          <ID> - Índice do vértice
#
#         Veja um exemplo:
#         -arquivo_delete_vertice.txt------------
#         |	*vertices 1			|
#         |	1 "vertice 1"			|
#         |	*queries			|
#         |	delete 1			|
#         |	delete 2			|
#         |	@				|
#         ---------------------------------------
#         -Retorno-------------------------------------------------------
#         |	{"delete"{"ID":1,"resposta":"sucesso"}}			|
#         |	{"delete"{"ID":2,"resposta":"falha"}}			|
#          --------------------------------------------------------------
#         Obs.: Deletar um vértice implica em remove todo e qualquer aresta com 
#         origem ou destino no vertice tal.
#
#         3.4.3 remove <ID1> <ID2>
#         O comando "remove <ID1> <ID2>" remove a aresta ID1 conectada a ID2, se
#         existir ou retona falaha se a conexão não existir.
#         O comando é composto por três partes:
#          remove
#          <ID1> - Índice do vertice Origem
#          <ID2> - Índice do vertice destino
#
#         Veja um exemplo:
#         -arquivo_remove_aresta.txt-------------
#         |	*vertices 2			|
#         |	1 "vertice 1"			|
#         |	2 "vertice 2"			|
#         |	*arcs     			|
#         |	1 2 1           		|
#         |     *queries                        |
#         |	remove 1 2			|
#         |	remove 2 1			|
#         |	@				|
#         ---------------------------------------
#         -Retorno-------------------------------------------------------
#         |	{"remove"{"ID1":1,"ID2":2,"resposta":"sucesso"}}	|
#         |	{"remove"{"ID1":2,"ID2":1,"resposta":"falha"}}		|
#          --------------------------------------------------------------
#
#         3.4.4 vizinhos <ID>
#         O comando "get <ID>" retorna uma lista de vizinhos do vértice ID. No 
#         caso do grafo ser direcionado, os vizinhos são aqueles apontados pelo 
#         vértice ID. Retorna falha se o vértice ID não existir.
#         O comando é composto por duas partes:
#          vizinhos
#          <ID> - Índice do vértice
#
#         Veja um exemplo:
#         -arquivo_vizinhos_aresta.txt-----------
#         |	*vertices 2			|
#         |	1 "vertice 1"			|
#         |	2 "vertice 2"			|
#         |	*arcs				|
#         |	1 2 1				|
#         |	*queries			|
#         |	vizinhos 1			|
#         |	vizinhos 2			|
#         |	@				|
#         ---------------------------------------
#         -Retorno-----------------------------------------------------------
#         |	{"vizinhos":{"ID":1, "resposta":"sucesso", "vizinhos":[2]}} |
#         |	{"vizinhos":{"ID":2, "resposta":"falha", "vizinhos":[]}}    |
#         -------------------------------------------------------------------
#
#         3.4.5 conexao <ID1> <ID2>
#         O comando "conexao <ID1> <ID2>" informa se existe uma conexão entre 
#         os vértices ID1 e ID2. Falha se ID1 ou ID2 não existirem.
#         O comando é composto por três partes:
#          conexao
#          <ID1> - Índice do vértice origem
#          <ID2> - Índice do vértice destino
#
#         Veja um exemplo:
#         -arquivo_conexao_aresta.txt------------
#         |	*vertices 2			|
#         |	1 "vertice 1"			|
#         |	2 "vertice 2"			|
#         |	*arcs				|
#         |	1 2 1				|
#         |	*queries			|
#         |	conexao 1 2			|
#         |	conexao 2 1			|
#         |	conexao 2 3			|
#         |	@				|
#         ---------------------------------------
#         -Retorno---------------------------------------------------------------------
#         |	{"conexao":{"ID1":1, "ID2":2, "resposta":"sucesso", "conexao":"sim"}} |
#         |	{"conexao":{"ID1":2, "ID2":1, "resposta":"sucesso", "conexao":"nao"}} |
#         |	{"conexao":{"ID1":2, "ID2":3, "resposta":"falha", "conexao":""}}      |
#         -----------------------------------------------------------------------------
#
#         3.4.6 ordemtopologica
#         O comando "ordemtopologica" retorna a ordem topológica do grafo. Para isso
#         deve-se assegurar trẽs condições:
#           * Que o grafo seja direcionado, do tipo *arcs;
#           * Que o grafo seja conexo;
#           * Que não haja ciclos no grafo;
#         O comando é unitário sendo assim:
#          ordemtopologica
#
#         Veja o primeiro exemplo:
#         -arquivo_ordemtopologica_exec.txt------
#         |	*vertices 5			|
#         |	1 "vertice 1"			|
#         |	2 "vertice 2"			|
#         |	3 "vertice 3"			|
#         |	4 "vertice 4"			|
#         |	5 "vertice 5"			|
#         |	*arcs				|
#         |	5 1 1				|
#         |	5 2 1				|
#         |	5 3 1				|
#         |	1 3 1				|
#         |	1 4 1				|
#         |	2 3 1				|
#         |	*queries			|
#         |	ordemtopologica			|
#         |	@				|
#         ---------------------------------------
#         -Retorno-----------------------------------------------------------
#         |	 {"ordemtop":[5,1,2,3,4]}                                   |
#         -------------------------------------------------------------------
#
#         Veja o segundo exemplo:
#         -arquivo_ordemtopologica_nao_exec.txt--
#         |	*vertices 5			|
#         |	1 "vertice 1"			|
#         |	2 "vertice 2"			|
#         |	3 "vertice 3"			|
#         |	4 "vertice 4"			|
#         |	5 "vertice 5"			|
#         |	*arcs				|
#         |	5 1 1				|
#         |	5 2 1				|
#         |	5 3 1				|
#         |	1 3 1				|
#         |	1 4 1				|
#         |	2 3 1				|
#         |	*queries			|
#         |	ordemtopologica			|
#         |	@				|
#         ---------------------------------------
#         -Retorno-----------------------------------------------------------
#         |     {"ordemtop":[]}                                             |
#         -------------------------------------------------------------------
#         Obs.: Um ciclo induzido por um vertice A-B e B-A ou grafo *edges não 
#         respeitam as condição automaticamente fazem o grafo retornar a Ordem
#         Topológica vazia. Veja que esse exemplo possui ciclos criados pelo
#         comando *edges.
#
#         3.4.7 arvoreminima
#         O comando "arvoreminima" retorna a árvore geradora mínima do grafo.
#         Para isso deve-se assegurar duas condições:
#           * Que o grafo seja não direcionado, do tipo *arcs;
#           * Que o grafo seja conexo;
#         O comando é unitário sendo assim:
#          arvoreminima
#         -arquivo_arvoreminima_exec.txt---------
#         |	*vertices 5			|
#         |	1 "vertice 1"			|
#         |	2 "vertice 2"			|
#         |	3 "vertice 3"			|
#         |	4 "vertice 4"			|
#         |	5 "vertice 5"			|
#         |	*arcs				|
#         |	1 2 11				|
#         |	1 3 1				|
#         |	1 4 12				|
#         |	2 3 2				|
#         |	2 5 13				|
#         |	3 4 3				|
#         |	3 5 4				|
#         |	4 5 14				|
#         |	*queries			|
#         |	arvoreminima			|
#         |	@				|
#         ---------------------------------------
#         -Retorno-------------------------------------------------------------------
#         |	 {"arvoreminima":{"arestas":[(1,3),(3,4),(3,5),(2,3)], "custo":10}} |
#         ---------------------------------------------------------------------------
#
#         Obs.: Se for executado em um grafo direcionado ou não conexo, então
#         exibirá o retorno abaixo.
#         -Retorno-----------------------------------------------------------
#         |     {"arvoreminima":{"arestas":[], "custo":}}                   |
#         -------------------------------------------------------------------
#           
#         3.4.8 menorcaminho
#	  O comando "menorcaminho" retorna o caminho de custo mínimo entre 
#         dois vertices.
#         O comando é composto por três partes:
#          menorcaminho
#          <ID1> - Índice do vértice origem
#          <ID2> - Índice do vértice destino
#         Para isso deve-se assegurar duas condições:
#           * Que o grafo seja não direcionado, do tipo *arcs;
#           * Que o grafo seja conexo;
#         -arquivo_menorcaminho.txt--------------
#         |	*vertices 6			|
#         |	1 "vertice 1"			|
#         |	2 "vertice 2"			|
#         |	3 "vertice 3"			|
#         |	4 "vertice 4"			|
#         |	5 "vertice 5"			|
#         |	6 "vertice 6"			|
#         |	*edges				|
#         |	1 2 7				|
#         |	1 3 9				|
#         |	1 6 14				|
#         |	2 3 10				|
#         |	2 4 15				|
#         |	3 6 2				|
#         |	3 4 11				|
#         |	5 6 8				|
#         |	*queries			|
#         |	menorcaminho 1 4		|
#         |	@				|
#         ---------------------------------------
#         -Retorno-----------------------------------------------------------------
#         |	 {"menorcaminho":{"ID1":1, "ID2":4,"caminho":[1,3,4], "custo":20}}|
#         -------------------------------------------------------------------------
#  
#         Obs.: Se o comando "menorcaminho" for executado em um grafo sem um
#         dos vertices ou não conexo então exibirá o retorno abaixo.
#         -Retorno-----------------------------------------------------------
#         |     {"menorcaminho":{"ID1":0, "ID2":3, "caminho":[],"custo":}}  |
#         -------------------------------------------------------------------
#         
#         3.4.9 modografico
#           [not implemented yet]
#
#   3.5 @
#      O comando "@" é a condição de parada da leitura de comandos e encerra a 
#      execução do programa. Caso haja algum comando após ele, serão 
#      desconsiderados da execução.
#      Veja um exemplo a abaixo:
#
#      -arquivo_condicao_parada.txt------
#      |	*vertices 1		|
#      |	1 "vertice 1"		|
#      |	@			|
#      |	*queries		|
#      |	remove 1		|
#      |	remove 2		|
#      |	@			|
#      ----------------------------------
#      -Retorno--------------------------
#      |				|
#      ----------------------------------
#
################################################################################
# 4.Como executar
################################################################################
#
#   Através do repositório no GitHub ( @github ) é possível obter os arquivos 
#   individuais para a execução do grafo. Podendo inclusive baixar e executar os
#   arquivos da pasta 'exemplosDeComandos', entretanto aqui está disponível
#   apenas os arquivos abaixo, mínimos para a execução do grafo:
#     * Grafo.java
#     * Vertice.java
#     * Aresta.java
#
#   4.1 Compilar o Grafo
#         Para a compilação se opta por executar diretamente a compilação do
#         grafo que resolve as compilações dependentes que no caso Vertice e 
#         Aresta.Para compilar no terminal:
#
#         $ javac Grafo.java
#
#   4.2 Execução do grafo
#         4.2.1 Execução do grafo
#         Para executar o grafo no terminal basta digitar:
#
#         $ java -Xms500m -Xmx2300m Grafo
#
#         4.2.2 Execução do grafo em modo Grafico
#         Para executar a árvore de sufixo no terminal basta digitar:
#
#         $ java -Xms500m -Xmx2300m NOT_IMPLEMENT_YET
#
#   Obs.: Os parametros -Xms e -Xmx da JVM reserva 500Mb no mínimo e no máximo 
#   2,3Gb alocada de Memória RAM para executar o processo, estando o máximo 
#   limitado pela memória do computador onde está sendo executado. Ficando assim
#   possível de troca desses valores segundo a necessidade e o seu limite de
#   hardware.
#
################################################################################
# 5.Resultados obtidos
################################################################################
#
#   Os testes realizados no Projeto Königsberg foram feitos no computador
#   especificado no ítem 1.0 . Todos os casos de teste realizados e resultados
#   obtidos estão disponível no no diretório 'casosDeTeste/' do projeto no
#   GitHub. Abaixo encontra-se alguns resultado, assim com alguns Bugs e
#   incoerências apresentados em algumas grafos testados.
#
#   5.1 Resultado por tempo de execução
#       Simulação 1
#           Arquivo           : casoDeTeste_simulacao_1.txt
#           Nº de vertices    : 110
#           Nº de arestas     : 110
#           Comando testado   : adicionar vertices e arestas *Edges
#           Tempo de execução : 0m0.172s
#
#       Simulação 2
#           Arquivo           : casoDeTeste_simulacao_2.txt
#           Nº de vertices    : 110
#           Nº de arestas     : 110
#           Comando testado   : adicionar vertices e arestas *Arcs
#           Tempo de execução : 0m0.148s
#
#       Simulação 3
#           Arquivo           : casoDeTeste_simulacao_3.txt
#           Nº de vertices    : 110
#           Nº de arestas     : 110
#           Comando testado   : menorcaminho
#           Tempo de execução : 0m0.236s
#
#       Simulação 4
#           Arquivo           : casoDeTeste_simulacao_4.txt
#           Nº de vertices    : 110
#           Nº de arestas     : 62
#           Comando testado   : arvoreminima
#           Tempo de execução : 0m0.208s
#
#       Simulação 5
#           Arquivo           : casoDeTeste_simulacao_5.txt
#           Nº de vertices    : 110
#           Nº de arestas     : 110
#           Comando testado   : ordemtopologica
#           Tempo de execução : 0m0.168s
#
#       Obs.: Tempo de execução é desconsiderando o tempo utilizado pelo systema.
#
#   5.2 Bugs e incoerências
#       Abaixo estão listados alguns bugs encontrados segundo cada caso de teste
#       realizado que resultou em algum tipo de erro ou inconstância.
#
#       Bug 1
#           Arquivo : casoDeTeste_error_0.txt
#           Comando : menorcaminho
#           Erro    : O comando trás com sucesso o custo, porém o caminho está
#                     acusando começar com '4' em vez de '0'. Tudo indica que se
#                     perde apenas na criação do retorno, ou seja, em saber quem
#                     é o antecessor.
#           Ocorre  : Em apenas alguns grafos.
#
#       Bug 2
#           Arquivo : casoDeTeste_error_1.txt
#           Comando : arvoreminima
#           Erro    : O programa exibe um 'NullPinterException' devido a tentar
#                     manipular uma aresta que não foi adiciona ao vertice, a
#                     causa desse problema acredito estar ligado a esse grafo
#                     pois não tenho condições de examiná-lo se possúi ciclo
#                     devido a sua complexidade de mais de 100 vertices.
#           Ocorre  : Em apenas alguns grafos.
#
################################################################################
# 6.Conclusão
################################################################################
#
#
#
#
################################################################################